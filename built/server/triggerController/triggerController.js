"use strict";
var express = require("express");
var TriggerController = (function () {
    function TriggerController(logger, path, service) {
        var _this = this;
        this.loadRoutes = function () {
            _this.router.get("/", _this.getAllTriggers);
            _this.router.post("/", _this.createNewTrigger);
            _this.router.put("/", _this.updateTrigger);
            _this.router.delete("/:id", _this.deleteTrigger);
            _this.logger.info("TriggerController |", "routes loaded");
        };
        this.getAllTriggers = function (req, res, next) {
            _this.service.read()
                .then(function (response) { return res.status(200).send(response); })
                .catch(function (response) { return res.status(400).send(response); });
        };
        this.createNewTrigger = function (req, res, next) {
            _this.service.create(req.body)
                .then(function (response) { return res.status(200).send(response); })
                .catch(function (response) { return res.status(400).send(response); });
        };
        this.updateTrigger = function (req, res, next) {
            _this.service.update(req.params.id, req.body)
                .then(function (response) { return res.status(200).send(response); })
                .catch(function (response) { return res.status(400).send(response); });
        };
        this.deleteTrigger = function (req, res, next) {
            _this.service.delete(req.params.id)
                .then(function (response) { return res.status(200).send(response); })
                .catch(function (response) { return res.status(400).send(response); });
        };
        this.path = path;
        this.router = express.Router();
        this.logger = logger;
        this.service = service;
        this.loadRoutes();
    }
    return TriggerController;
}());
exports.__esModule = true;
exports["default"] = TriggerController;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyaWdnZXJDb250cm9sbGVyL3RyaWdnZXJDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFZLE9BQU8sV0FBTSxTQUFTLENBQUMsQ0FBQTtBQU9uQztJQU9FLDJCQUFZLE1BQWUsRUFBRSxJQUFZLEVBQUUsT0FBaUI7UUFQOUQsaUJBZ0RDO1FBaENTLGVBQVUsR0FBRztZQUNuQixLQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBQzFDLEtBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUM3QyxLQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ3pDLEtBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxLQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7WUFFL0MsS0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDM0QsQ0FBQyxDQUFBO1FBRU8sbUJBQWMsR0FBRyxVQUFDLEdBQW9CLEVBQUUsR0FBcUIsRUFBRSxJQUEwQjtZQUMvRixLQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRTtpQkFDbEIsSUFBSSxDQUFDLFVBQUMsUUFBbUIsSUFBSyxPQUFBLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUE5QixDQUE4QixDQUFDO2lCQUM3RCxLQUFLLENBQUMsVUFBQyxRQUFtQixJQUFLLE9BQUEsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQTlCLENBQThCLENBQUMsQ0FBQztRQUNsRSxDQUFDLENBQUE7UUFFTyxxQkFBZ0IsR0FBRyxVQUFDLEdBQW9CLEVBQUUsR0FBcUIsRUFBRSxJQUEwQjtZQUNqRyxLQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO2lCQUM1QixJQUFJLENBQUMsVUFBQyxRQUFtQixJQUFLLE9BQUEsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQTlCLENBQThCLENBQUM7aUJBQzdELEtBQUssQ0FBQyxVQUFDLFFBQW1CLElBQUssT0FBQSxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBOUIsQ0FBOEIsQ0FBQyxDQUFDO1FBQ2xFLENBQUMsQ0FBQTtRQUVPLGtCQUFhLEdBQUcsVUFBQyxHQUFvQixFQUFFLEdBQXFCLEVBQUUsSUFBMEI7WUFDOUYsS0FBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQztpQkFDM0MsSUFBSSxDQUFDLFVBQUMsUUFBbUIsSUFBSyxPQUFBLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUE5QixDQUE4QixDQUFDO2lCQUM3RCxLQUFLLENBQUMsVUFBQyxRQUFtQixJQUFLLE9BQUEsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQTlCLENBQThCLENBQUMsQ0FBQztRQUNsRSxDQUFDLENBQUE7UUFFTyxrQkFBYSxHQUFHLFVBQUMsR0FBb0IsRUFBRSxHQUFxQixFQUFFLElBQTBCO1lBQzlGLEtBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO2lCQUNqQyxJQUFJLENBQUMsVUFBQyxRQUFtQixJQUFLLE9BQUEsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQTlCLENBQThCLENBQUM7aUJBQzdELEtBQUssQ0FBQyxVQUFDLFFBQW1CLElBQUssT0FBQSxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBOUIsQ0FBOEIsQ0FBQyxDQUFDO1FBQ2xFLENBQUMsQ0FBQTtRQXZDQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUMvQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUV2QixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQWtDSCx3QkFBQztBQUFELENBaERBLEFBZ0RDLElBQUE7QUFoREQ7c0NBZ0RDLENBQUEiLCJmaWxlIjoidHJpZ2dlckNvbnRyb2xsZXIvdHJpZ2dlckNvbnRyb2xsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBleHByZXNzIGZyb20gXCJleHByZXNzXCI7XG5cbmltcG9ydCB7IElDb250cm9sbGVyLCBJTG9nZ2VyLCBJU2VydmljZSwgSVJlc3BvbnNlIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvaW50ZXJmYWNlcy5kLnRzXCI7XG5cbi8qKlxuICogQ2xhc3MgdGhhdCByZXByZXNlbnRzIGEgdHJpZ2dlciBjb250cm9sbGVyIGFuZCByb3V0ZXMgdHJpZ2VyIGRhdGEuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyaWdnZXJDb250cm9sbGVyIGltcGxlbWVudHMgSUNvbnRyb2xsZXIge1xuXG4gIHB1YmxpYyBwYXRoOiBzdHJpbmc7XG4gIHB1YmxpYyByb3V0ZXI6IGV4cHJlc3MuUm91dGVyO1xuICBwdWJsaWMgbG9nZ2VyOiBJTG9nZ2VyO1xuICBwdWJsaWMgc2VydmljZTogSVNlcnZpY2U7XG5cbiAgY29uc3RydWN0b3IobG9nZ2VyOiBJTG9nZ2VyLCBwYXRoOiBzdHJpbmcsIHNlcnZpY2U6IElTZXJ2aWNlKSB7XG4gICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgICB0aGlzLnJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XG4gICAgdGhpcy5sb2dnZXIgPSBsb2dnZXI7XG4gICAgdGhpcy5zZXJ2aWNlID0gc2VydmljZTtcblxuICAgIHRoaXMubG9hZFJvdXRlcygpO1xuICB9XG5cbiAgcHJpdmF0ZSBsb2FkUm91dGVzID0gKCkgPT4ge1xuICAgIHRoaXMucm91dGVyLmdldChcIi9cIiwgdGhpcy5nZXRBbGxUcmlnZ2Vycyk7XG4gICAgdGhpcy5yb3V0ZXIucG9zdChcIi9cIiwgdGhpcy5jcmVhdGVOZXdUcmlnZ2VyKTtcbiAgICB0aGlzLnJvdXRlci5wdXQoXCIvXCIsIHRoaXMudXBkYXRlVHJpZ2dlcik7XG4gICAgdGhpcy5yb3V0ZXIuZGVsZXRlKFwiLzppZFwiLCB0aGlzLmRlbGV0ZVRyaWdnZXIpO1xuXG4gICAgdGhpcy5sb2dnZXIuaW5mbyhcIlRyaWdnZXJDb250cm9sbGVyIHxcIiwgXCJyb3V0ZXMgbG9hZGVkXCIpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRBbGxUcmlnZ2VycyA9IChyZXE6IGV4cHJlc3MuUmVxdWVzdCwgcmVzOiBleHByZXNzLlJlc3BvbnNlLCBuZXh0OiBleHByZXNzLk5leHRGdW5jdGlvbikgPT4ge1xuICAgIHRoaXMuc2VydmljZS5yZWFkKClcbiAgICAudGhlbigocmVzcG9uc2U6IElSZXNwb25zZSkgPT4gcmVzLnN0YXR1cygyMDApLnNlbmQocmVzcG9uc2UpKVxuICAgIC5jYXRjaCgocmVzcG9uc2U6IElSZXNwb25zZSkgPT4gcmVzLnN0YXR1cyg0MDApLnNlbmQocmVzcG9uc2UpKTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlTmV3VHJpZ2dlciA9IChyZXE6IGV4cHJlc3MuUmVxdWVzdCwgcmVzOiBleHByZXNzLlJlc3BvbnNlLCBuZXh0OiBleHByZXNzLk5leHRGdW5jdGlvbikgPT4ge1xuICAgIHRoaXMuc2VydmljZS5jcmVhdGUocmVxLmJvZHkpXG4gICAgLnRoZW4oKHJlc3BvbnNlOiBJUmVzcG9uc2UpID0+IHJlcy5zdGF0dXMoMjAwKS5zZW5kKHJlc3BvbnNlKSlcbiAgICAuY2F0Y2goKHJlc3BvbnNlOiBJUmVzcG9uc2UpID0+IHJlcy5zdGF0dXMoNDAwKS5zZW5kKHJlc3BvbnNlKSk7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZVRyaWdnZXIgPSAocmVxOiBleHByZXNzLlJlcXVlc3QsIHJlczogZXhwcmVzcy5SZXNwb25zZSwgbmV4dDogZXhwcmVzcy5OZXh0RnVuY3Rpb24pID0+IHtcbiAgICB0aGlzLnNlcnZpY2UudXBkYXRlKHJlcS5wYXJhbXMuaWQsIHJlcS5ib2R5KVxuICAgIC50aGVuKChyZXNwb25zZTogSVJlc3BvbnNlKSA9PiByZXMuc3RhdHVzKDIwMCkuc2VuZChyZXNwb25zZSkpXG4gICAgLmNhdGNoKChyZXNwb25zZTogSVJlc3BvbnNlKSA9PiByZXMuc3RhdHVzKDQwMCkuc2VuZChyZXNwb25zZSkpO1xuICB9XG5cbiAgcHJpdmF0ZSBkZWxldGVUcmlnZ2VyID0gKHJlcTogZXhwcmVzcy5SZXF1ZXN0LCByZXM6IGV4cHJlc3MuUmVzcG9uc2UsIG5leHQ6IGV4cHJlc3MuTmV4dEZ1bmN0aW9uKSA9PiB7XG4gICAgdGhpcy5zZXJ2aWNlLmRlbGV0ZShyZXEucGFyYW1zLmlkKVxuICAgIC50aGVuKChyZXNwb25zZTogSVJlc3BvbnNlKSA9PiByZXMuc3RhdHVzKDIwMCkuc2VuZChyZXNwb25zZSkpXG4gICAgLmNhdGNoKChyZXNwb25zZTogSVJlc3BvbnNlKSA9PiByZXMuc3RhdHVzKDQwMCkuc2VuZChyZXNwb25zZSkpO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
