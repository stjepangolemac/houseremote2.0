"use strict";
var express = require("express");
var SensorController = (function () {
    function SensorController(logger, path, service) {
        var _this = this;
        this.loadRoutes = function () {
            _this.router.get("/", _this.getAllSensors);
            _this.router.post("/", _this.createNewSensor);
            _this.router.put("/", _this.updateSensor);
            _this.router.delete("/", _this.deleteSensor);
            _this.logger.info("SensorController |", "routes loaded");
        };
        this.getAllSensors = function (req, res, next) {
            _this.service.read()
                .then(function (response) { return res.status(200).send(response); })
                .catch(function (response) { return res.status(400).send(response); });
        };
        this.createNewSensor = function (req, res, next) {
            _this.service.create(req.body)
                .then(function (response) { return res.status(200).send(response); })
                .catch(function (response) { return res.status(400).send(response); });
        };
        this.updateSensor = function (req, res, next) {
            _this.service.update(req.params.id, req.body)
                .then(function (response) { return res.status(200).send(response); })
                .catch(function (response) { return res.status(400).send(response); });
        };
        this.deleteSensor = function (req, res, next) {
            _this.service.delete(req.params.id)
                .then(function (response) { return res.status(200).send(response); })
                .catch(function (response) { return res.status(400).send(response); });
        };
        this.path = path;
        this.router = express.Router();
        this.logger = logger;
        this.service = service;
        this.loadRoutes();
    }
    return SensorController;
}());
exports.__esModule = true;
exports["default"] = SensorController;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlbnNvckNvbnRyb2xsZXIvc2Vuc29yQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBWSxPQUFPLFdBQU0sU0FBUyxDQUFDLENBQUE7QUFPbkM7SUFPRSwwQkFBWSxNQUFlLEVBQUUsSUFBWSxFQUFFLE9BQWlCO1FBUDlELGlCQWdEQztRQWhDUyxlQUFVLEdBQUc7WUFDbkIsS0FBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUN6QyxLQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsS0FBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBQzVDLEtBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDeEMsS0FBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUUzQyxLQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxlQUFlLENBQUMsQ0FBQztRQUMxRCxDQUFDLENBQUE7UUFFTyxrQkFBYSxHQUFHLFVBQUMsR0FBb0IsRUFBRSxHQUFxQixFQUFFLElBQTBCO1lBQzlGLEtBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFO2lCQUNsQixJQUFJLENBQUMsVUFBQyxRQUFtQixJQUFLLE9BQUEsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQTlCLENBQThCLENBQUM7aUJBQzdELEtBQUssQ0FBQyxVQUFDLFFBQW1CLElBQUssT0FBQSxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBOUIsQ0FBOEIsQ0FBQyxDQUFDO1FBQ2xFLENBQUMsQ0FBQTtRQUVPLG9CQUFlLEdBQUcsVUFBQyxHQUFvQixFQUFFLEdBQXFCLEVBQUUsSUFBMEI7WUFDaEcsS0FBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQztpQkFDNUIsSUFBSSxDQUFDLFVBQUMsUUFBbUIsSUFBSyxPQUFBLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUE5QixDQUE4QixDQUFDO2lCQUM3RCxLQUFLLENBQUMsVUFBQyxRQUFtQixJQUFLLE9BQUEsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQTlCLENBQThCLENBQUMsQ0FBQztRQUNsRSxDQUFDLENBQUE7UUFFTyxpQkFBWSxHQUFHLFVBQUMsR0FBb0IsRUFBRSxHQUFxQixFQUFFLElBQTBCO1lBQzdGLEtBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUM7aUJBQzNDLElBQUksQ0FBQyxVQUFDLFFBQW1CLElBQUssT0FBQSxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBOUIsQ0FBOEIsQ0FBQztpQkFDN0QsS0FBSyxDQUFDLFVBQUMsUUFBbUIsSUFBSyxPQUFBLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUE5QixDQUE4QixDQUFDLENBQUM7UUFDbEUsQ0FBQyxDQUFBO1FBRU8saUJBQVksR0FBRyxVQUFDLEdBQW9CLEVBQUUsR0FBcUIsRUFBRSxJQUEwQjtZQUM3RixLQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztpQkFDakMsSUFBSSxDQUFDLFVBQUMsUUFBbUIsSUFBSyxPQUFBLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUE5QixDQUE4QixDQUFDO2lCQUM3RCxLQUFLLENBQUMsVUFBQyxRQUFtQixJQUFLLE9BQUEsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQTlCLENBQThCLENBQUMsQ0FBQztRQUNsRSxDQUFDLENBQUE7UUF2Q0MsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDL0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFFdkIsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFrQ0gsdUJBQUM7QUFBRCxDQWhEQSxBQWdEQyxJQUFBO0FBaEREO3FDQWdEQyxDQUFBIiwiZmlsZSI6InNlbnNvckNvbnRyb2xsZXIvc2Vuc29yQ29udHJvbGxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIjtcblxuaW1wb3J0IHsgSUNvbnRyb2xsZXIsIElMb2dnZXIsIElTZXJ2aWNlLCBJUmVzcG9uc2UgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9pbnRlcmZhY2VzLmQudHNcIjtcblxuLyoqXG4gKiBDbGFzcyB0aGF0IHJlcHJlc2VudHMgYSBzZW5zb3IgY29udHJvbGxlciBhbmQgcm91dGVzIHRyaWdlciBkYXRhLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZW5zb3JDb250cm9sbGVyIGltcGxlbWVudHMgSUNvbnRyb2xsZXIge1xuXG4gIHB1YmxpYyBwYXRoOiBzdHJpbmc7XG4gIHB1YmxpYyByb3V0ZXI6IGV4cHJlc3MuUm91dGVyO1xuICBwdWJsaWMgbG9nZ2VyOiBJTG9nZ2VyO1xuICBwdWJsaWMgc2VydmljZTogSVNlcnZpY2U7XG5cbiAgY29uc3RydWN0b3IobG9nZ2VyOiBJTG9nZ2VyLCBwYXRoOiBzdHJpbmcsIHNlcnZpY2U6IElTZXJ2aWNlKSB7XG4gICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgICB0aGlzLnJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XG4gICAgdGhpcy5sb2dnZXIgPSBsb2dnZXI7XG4gICAgdGhpcy5zZXJ2aWNlID0gc2VydmljZTtcblxuICAgIHRoaXMubG9hZFJvdXRlcygpO1xuICB9XG5cbiAgcHJpdmF0ZSBsb2FkUm91dGVzID0gKCkgPT4ge1xuICAgIHRoaXMucm91dGVyLmdldChcIi9cIiwgdGhpcy5nZXRBbGxTZW5zb3JzKTtcbiAgICB0aGlzLnJvdXRlci5wb3N0KFwiL1wiLCB0aGlzLmNyZWF0ZU5ld1NlbnNvcik7XG4gICAgdGhpcy5yb3V0ZXIucHV0KFwiL1wiLCB0aGlzLnVwZGF0ZVNlbnNvcik7XG4gICAgdGhpcy5yb3V0ZXIuZGVsZXRlKFwiL1wiLCB0aGlzLmRlbGV0ZVNlbnNvcik7XG5cbiAgICB0aGlzLmxvZ2dlci5pbmZvKFwiU2Vuc29yQ29udHJvbGxlciB8XCIsIFwicm91dGVzIGxvYWRlZFwiKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0QWxsU2Vuc29ycyA9IChyZXE6IGV4cHJlc3MuUmVxdWVzdCwgcmVzOiBleHByZXNzLlJlc3BvbnNlLCBuZXh0OiBleHByZXNzLk5leHRGdW5jdGlvbikgPT4ge1xuICAgIHRoaXMuc2VydmljZS5yZWFkKClcbiAgICAudGhlbigocmVzcG9uc2U6IElSZXNwb25zZSkgPT4gcmVzLnN0YXR1cygyMDApLnNlbmQocmVzcG9uc2UpKVxuICAgIC5jYXRjaCgocmVzcG9uc2U6IElSZXNwb25zZSkgPT4gcmVzLnN0YXR1cyg0MDApLnNlbmQocmVzcG9uc2UpKTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlTmV3U2Vuc29yID0gKHJlcTogZXhwcmVzcy5SZXF1ZXN0LCByZXM6IGV4cHJlc3MuUmVzcG9uc2UsIG5leHQ6IGV4cHJlc3MuTmV4dEZ1bmN0aW9uKSA9PiB7XG4gICAgdGhpcy5zZXJ2aWNlLmNyZWF0ZShyZXEuYm9keSlcbiAgICAudGhlbigocmVzcG9uc2U6IElSZXNwb25zZSkgPT4gcmVzLnN0YXR1cygyMDApLnNlbmQocmVzcG9uc2UpKVxuICAgIC5jYXRjaCgocmVzcG9uc2U6IElSZXNwb25zZSkgPT4gcmVzLnN0YXR1cyg0MDApLnNlbmQocmVzcG9uc2UpKTtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlU2Vuc29yID0gKHJlcTogZXhwcmVzcy5SZXF1ZXN0LCByZXM6IGV4cHJlc3MuUmVzcG9uc2UsIG5leHQ6IGV4cHJlc3MuTmV4dEZ1bmN0aW9uKSA9PiB7XG4gICAgdGhpcy5zZXJ2aWNlLnVwZGF0ZShyZXEucGFyYW1zLmlkLCByZXEuYm9keSlcbiAgICAudGhlbigocmVzcG9uc2U6IElSZXNwb25zZSkgPT4gcmVzLnN0YXR1cygyMDApLnNlbmQocmVzcG9uc2UpKVxuICAgIC5jYXRjaCgocmVzcG9uc2U6IElSZXNwb25zZSkgPT4gcmVzLnN0YXR1cyg0MDApLnNlbmQocmVzcG9uc2UpKTtcbiAgfVxuXG4gIHByaXZhdGUgZGVsZXRlU2Vuc29yID0gKHJlcTogZXhwcmVzcy5SZXF1ZXN0LCByZXM6IGV4cHJlc3MuUmVzcG9uc2UsIG5leHQ6IGV4cHJlc3MuTmV4dEZ1bmN0aW9uKSA9PiB7XG4gICAgdGhpcy5zZXJ2aWNlLmRlbGV0ZShyZXEucGFyYW1zLmlkKVxuICAgIC50aGVuKChyZXNwb25zZTogSVJlc3BvbnNlKSA9PiByZXMuc3RhdHVzKDIwMCkuc2VuZChyZXNwb25zZSkpXG4gICAgLmNhdGNoKChyZXNwb25zZTogSVJlc3BvbnNlKSA9PiByZXMuc3RhdHVzKDQwMCkuc2VuZChyZXNwb25zZSkpO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
