"use strict";
var express = require("express");
var PeriodicTimerController = (function () {
    function PeriodicTimerController(logger, path, service) {
        var _this = this;
        this.loadRoutes = function () {
            _this.router.get("/", _this.getAllPeriodicTimers);
            _this.router.post("/", _this.createNewPeriodicTimer);
            _this.router.put("/", _this.updatePeriodicTimer);
            _this.router.delete("/", _this.deletePeriodicTimer);
            _this.logger.info("PeriodicTimerController |", "routes loaded");
        };
        this.getAllPeriodicTimers = function (req, res, next) {
            _this.service.read()
                .then(function (response) { return res.status(200).send(response); })
                .catch(function (response) { return res.status(400).send(response); });
        };
        this.createNewPeriodicTimer = function (req, res, next) {
            _this.service.create(req.body)
                .then(function (response) { return res.status(200).send(response); })
                .catch(function (response) { return res.status(400).send(response); });
        };
        this.updatePeriodicTimer = function (req, res, next) {
            _this.service.update(req.params.id, req.body)
                .then(function (response) { return res.status(200).send(response); })
                .catch(function (response) { return res.status(400).send(response); });
        };
        this.deletePeriodicTimer = function (req, res, next) {
            _this.service.delete(req.params.id)
                .then(function (response) { return res.status(200).send(response); })
                .catch(function (response) { return res.status(400).send(response); });
        };
        this.path = path;
        this.router = express.Router();
        this.logger = logger;
        this.service = service;
        this.loadRoutes();
    }
    return PeriodicTimerController;
}());
exports.__esModule = true;
exports["default"] = PeriodicTimerController;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBlcmlvZGljVGltZXJDb250cm9sbGVyL3BlcmlvZGljVGltZXJDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFZLE9BQU8sV0FBTSxTQUFTLENBQUMsQ0FBQTtBQU9uQztJQU9FLGlDQUFZLE1BQWUsRUFBRSxJQUFZLEVBQUUsT0FBaUI7UUFQOUQsaUJBZ0RDO1FBaENTLGVBQVUsR0FBRztZQUNuQixLQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7WUFDaEQsS0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1lBQ25ELEtBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztZQUMvQyxLQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7WUFFbEQsS0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsMkJBQTJCLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDakUsQ0FBQyxDQUFBO1FBRU8seUJBQW9CLEdBQUcsVUFBQyxHQUFvQixFQUFFLEdBQXFCLEVBQUUsSUFBMEI7WUFDckcsS0FBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUU7aUJBQ2xCLElBQUksQ0FBQyxVQUFDLFFBQW1CLElBQUssT0FBQSxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBOUIsQ0FBOEIsQ0FBQztpQkFDN0QsS0FBSyxDQUFDLFVBQUMsUUFBbUIsSUFBSyxPQUFBLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUE5QixDQUE4QixDQUFDLENBQUM7UUFDbEUsQ0FBQyxDQUFBO1FBRU8sMkJBQXNCLEdBQUcsVUFBQyxHQUFvQixFQUFFLEdBQXFCLEVBQUUsSUFBMEI7WUFDdkcsS0FBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQztpQkFDNUIsSUFBSSxDQUFDLFVBQUMsUUFBbUIsSUFBSyxPQUFBLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUE5QixDQUE4QixDQUFDO2lCQUM3RCxLQUFLLENBQUMsVUFBQyxRQUFtQixJQUFLLE9BQUEsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQTlCLENBQThCLENBQUMsQ0FBQztRQUNsRSxDQUFDLENBQUE7UUFFTyx3QkFBbUIsR0FBRyxVQUFDLEdBQW9CLEVBQUUsR0FBcUIsRUFBRSxJQUEwQjtZQUNwRyxLQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDO2lCQUMzQyxJQUFJLENBQUMsVUFBQyxRQUFtQixJQUFLLE9BQUEsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQTlCLENBQThCLENBQUM7aUJBQzdELEtBQUssQ0FBQyxVQUFDLFFBQW1CLElBQUssT0FBQSxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBOUIsQ0FBOEIsQ0FBQyxDQUFDO1FBQ2xFLENBQUMsQ0FBQTtRQUVPLHdCQUFtQixHQUFHLFVBQUMsR0FBb0IsRUFBRSxHQUFxQixFQUFFLElBQTBCO1lBQ3BHLEtBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO2lCQUNqQyxJQUFJLENBQUMsVUFBQyxRQUFtQixJQUFLLE9BQUEsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQTlCLENBQThCLENBQUM7aUJBQzdELEtBQUssQ0FBQyxVQUFDLFFBQW1CLElBQUssT0FBQSxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBOUIsQ0FBOEIsQ0FBQyxDQUFDO1FBQ2xFLENBQUMsQ0FBQTtRQXZDQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUMvQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUV2QixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQWtDSCw4QkFBQztBQUFELENBaERBLEFBZ0RDLElBQUE7QUFoREQ7NENBZ0RDLENBQUEiLCJmaWxlIjoicGVyaW9kaWNUaW1lckNvbnRyb2xsZXIvcGVyaW9kaWNUaW1lckNvbnRyb2xsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBleHByZXNzIGZyb20gXCJleHByZXNzXCI7XG5cbmltcG9ydCB7IElDb250cm9sbGVyLCBJTG9nZ2VyLCBJU2VydmljZSwgSVJlc3BvbnNlIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvaW50ZXJmYWNlcy5kLnRzXCI7XG5cbi8qKlxuICogQ2xhc3MgdGhhdCByZXByZXNlbnRzIGEgUGVyaW9kaWNUaW1lciBjb250cm9sbGVyIGFuZCByb3V0ZXMgdHJpZ2VyIGRhdGEuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBlcmlvZGljVGltZXJDb250cm9sbGVyIGltcGxlbWVudHMgSUNvbnRyb2xsZXIge1xuXG4gIHB1YmxpYyBwYXRoOiBzdHJpbmc7XG4gIHB1YmxpYyByb3V0ZXI6IGV4cHJlc3MuUm91dGVyO1xuICBwdWJsaWMgbG9nZ2VyOiBJTG9nZ2VyO1xuICBwdWJsaWMgc2VydmljZTogSVNlcnZpY2U7XG5cbiAgY29uc3RydWN0b3IobG9nZ2VyOiBJTG9nZ2VyLCBwYXRoOiBzdHJpbmcsIHNlcnZpY2U6IElTZXJ2aWNlKSB7XG4gICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgICB0aGlzLnJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XG4gICAgdGhpcy5sb2dnZXIgPSBsb2dnZXI7XG4gICAgdGhpcy5zZXJ2aWNlID0gc2VydmljZTtcblxuICAgIHRoaXMubG9hZFJvdXRlcygpO1xuICB9XG5cbiAgcHJpdmF0ZSBsb2FkUm91dGVzID0gKCkgPT4ge1xuICAgIHRoaXMucm91dGVyLmdldChcIi9cIiwgdGhpcy5nZXRBbGxQZXJpb2RpY1RpbWVycyk7XG4gICAgdGhpcy5yb3V0ZXIucG9zdChcIi9cIiwgdGhpcy5jcmVhdGVOZXdQZXJpb2RpY1RpbWVyKTtcbiAgICB0aGlzLnJvdXRlci5wdXQoXCIvXCIsIHRoaXMudXBkYXRlUGVyaW9kaWNUaW1lcik7XG4gICAgdGhpcy5yb3V0ZXIuZGVsZXRlKFwiL1wiLCB0aGlzLmRlbGV0ZVBlcmlvZGljVGltZXIpO1xuXG4gICAgdGhpcy5sb2dnZXIuaW5mbyhcIlBlcmlvZGljVGltZXJDb250cm9sbGVyIHxcIiwgXCJyb3V0ZXMgbG9hZGVkXCIpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRBbGxQZXJpb2RpY1RpbWVycyA9IChyZXE6IGV4cHJlc3MuUmVxdWVzdCwgcmVzOiBleHByZXNzLlJlc3BvbnNlLCBuZXh0OiBleHByZXNzLk5leHRGdW5jdGlvbikgPT4ge1xuICAgIHRoaXMuc2VydmljZS5yZWFkKClcbiAgICAudGhlbigocmVzcG9uc2U6IElSZXNwb25zZSkgPT4gcmVzLnN0YXR1cygyMDApLnNlbmQocmVzcG9uc2UpKVxuICAgIC5jYXRjaCgocmVzcG9uc2U6IElSZXNwb25zZSkgPT4gcmVzLnN0YXR1cyg0MDApLnNlbmQocmVzcG9uc2UpKTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlTmV3UGVyaW9kaWNUaW1lciA9IChyZXE6IGV4cHJlc3MuUmVxdWVzdCwgcmVzOiBleHByZXNzLlJlc3BvbnNlLCBuZXh0OiBleHByZXNzLk5leHRGdW5jdGlvbikgPT4ge1xuICAgIHRoaXMuc2VydmljZS5jcmVhdGUocmVxLmJvZHkpXG4gICAgLnRoZW4oKHJlc3BvbnNlOiBJUmVzcG9uc2UpID0+IHJlcy5zdGF0dXMoMjAwKS5zZW5kKHJlc3BvbnNlKSlcbiAgICAuY2F0Y2goKHJlc3BvbnNlOiBJUmVzcG9uc2UpID0+IHJlcy5zdGF0dXMoNDAwKS5zZW5kKHJlc3BvbnNlKSk7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZVBlcmlvZGljVGltZXIgPSAocmVxOiBleHByZXNzLlJlcXVlc3QsIHJlczogZXhwcmVzcy5SZXNwb25zZSwgbmV4dDogZXhwcmVzcy5OZXh0RnVuY3Rpb24pID0+IHtcbiAgICB0aGlzLnNlcnZpY2UudXBkYXRlKHJlcS5wYXJhbXMuaWQsIHJlcS5ib2R5KVxuICAgIC50aGVuKChyZXNwb25zZTogSVJlc3BvbnNlKSA9PiByZXMuc3RhdHVzKDIwMCkuc2VuZChyZXNwb25zZSkpXG4gICAgLmNhdGNoKChyZXNwb25zZTogSVJlc3BvbnNlKSA9PiByZXMuc3RhdHVzKDQwMCkuc2VuZChyZXNwb25zZSkpO1xuICB9XG5cbiAgcHJpdmF0ZSBkZWxldGVQZXJpb2RpY1RpbWVyID0gKHJlcTogZXhwcmVzcy5SZXF1ZXN0LCByZXM6IGV4cHJlc3MuUmVzcG9uc2UsIG5leHQ6IGV4cHJlc3MuTmV4dEZ1bmN0aW9uKSA9PiB7XG4gICAgdGhpcy5zZXJ2aWNlLmRlbGV0ZShyZXEucGFyYW1zLmlkKVxuICAgIC50aGVuKChyZXNwb25zZTogSVJlc3BvbnNlKSA9PiByZXMuc3RhdHVzKDIwMCkuc2VuZChyZXNwb25zZSkpXG4gICAgLmNhdGNoKChyZXNwb25zZTogSVJlc3BvbnNlKSA9PiByZXMuc3RhdHVzKDQwMCkuc2VuZChyZXNwb25zZSkpO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
