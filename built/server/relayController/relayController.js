"use strict";
var express = require("express");
var RelayController = (function () {
    function RelayController(logger, path, service) {
        var _this = this;
        this.loadRoutes = function () {
            _this.router.get("/", _this.getAllRelays);
            _this.router.post("/", _this.createNewRelay);
            _this.router.put("/", _this.updateRelay);
            _this.router.delete("/", _this.deleteRelay);
            _this.logger.info("RelayController |", "routes loaded");
        };
        this.getAllRelays = function (req, res, next) {
            _this.service.read()
                .then(function (response) { return res.status(200).send(response); })
                .catch(function (response) { return res.status(400).send(response); });
        };
        this.createNewRelay = function (req, res, next) {
            _this.service.create(req.body)
                .then(function (response) { return res.status(200).send(response); })
                .catch(function (response) { return res.status(400).send(response); });
        };
        this.updateRelay = function (req, res, next) {
            _this.service.update(req.params.id, req.body)
                .then(function (response) { return res.status(200).send(response); })
                .catch(function (response) { return res.status(400).send(response); });
        };
        this.deleteRelay = function (req, res, next) {
            _this.service.delete(req.params.id)
                .then(function (response) { return res.status(200).send(response); })
                .catch(function (response) { return res.status(400).send(response); });
        };
        this.path = path;
        this.router = express.Router();
        this.logger = logger;
        this.service = service;
        this.loadRoutes();
    }
    return RelayController;
}());
exports.__esModule = true;
exports["default"] = RelayController;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlbGF5Q29udHJvbGxlci9yZWxheUNvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQVksT0FBTyxXQUFNLFNBQVMsQ0FBQyxDQUFBO0FBT25DO0lBT0UseUJBQVksTUFBZSxFQUFFLElBQVksRUFBRSxPQUFpQjtRQVA5RCxpQkFnREM7UUFoQ1MsZUFBVSxHQUFHO1lBQ25CLEtBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDeEMsS0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUMzQyxLQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ3ZDLEtBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7WUFFMUMsS0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDekQsQ0FBQyxDQUFBO1FBRU8saUJBQVksR0FBRyxVQUFDLEdBQW9CLEVBQUUsR0FBcUIsRUFBRSxJQUEwQjtZQUM3RixLQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRTtpQkFDbEIsSUFBSSxDQUFDLFVBQUMsUUFBbUIsSUFBSyxPQUFBLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUE5QixDQUE4QixDQUFDO2lCQUM3RCxLQUFLLENBQUMsVUFBQyxRQUFtQixJQUFLLE9BQUEsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQTlCLENBQThCLENBQUMsQ0FBQztRQUNsRSxDQUFDLENBQUE7UUFFTyxtQkFBYyxHQUFHLFVBQUMsR0FBb0IsRUFBRSxHQUFxQixFQUFFLElBQTBCO1lBQy9GLEtBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7aUJBQzVCLElBQUksQ0FBQyxVQUFDLFFBQW1CLElBQUssT0FBQSxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBOUIsQ0FBOEIsQ0FBQztpQkFDN0QsS0FBSyxDQUFDLFVBQUMsUUFBbUIsSUFBSyxPQUFBLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUE5QixDQUE4QixDQUFDLENBQUM7UUFDbEUsQ0FBQyxDQUFBO1FBRU8sZ0JBQVcsR0FBRyxVQUFDLEdBQW9CLEVBQUUsR0FBcUIsRUFBRSxJQUEwQjtZQUM1RixLQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDO2lCQUMzQyxJQUFJLENBQUMsVUFBQyxRQUFtQixJQUFLLE9BQUEsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQTlCLENBQThCLENBQUM7aUJBQzdELEtBQUssQ0FBQyxVQUFDLFFBQW1CLElBQUssT0FBQSxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBOUIsQ0FBOEIsQ0FBQyxDQUFDO1FBQ2xFLENBQUMsQ0FBQTtRQUVPLGdCQUFXLEdBQUcsVUFBQyxHQUFvQixFQUFFLEdBQXFCLEVBQUUsSUFBMEI7WUFDNUYsS0FBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7aUJBQ2pDLElBQUksQ0FBQyxVQUFDLFFBQW1CLElBQUssT0FBQSxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBOUIsQ0FBOEIsQ0FBQztpQkFDN0QsS0FBSyxDQUFDLFVBQUMsUUFBbUIsSUFBSyxPQUFBLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUE5QixDQUE4QixDQUFDLENBQUM7UUFDbEUsQ0FBQyxDQUFBO1FBdkNDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQy9CLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBRXZCLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBa0NILHNCQUFDO0FBQUQsQ0FoREEsQUFnREMsSUFBQTtBQWhERDtvQ0FnREMsQ0FBQSIsImZpbGUiOiJyZWxheUNvbnRyb2xsZXIvcmVsYXlDb250cm9sbGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZXhwcmVzcyBmcm9tIFwiZXhwcmVzc1wiO1xuXG5pbXBvcnQgeyBJQ29udHJvbGxlciwgSUxvZ2dlciwgSVNlcnZpY2UsIElSZXNwb25zZSB9IGZyb20gXCIuLi9pbnRlcmZhY2VzL2ludGVyZmFjZXMuZC50c1wiO1xuXG4vKipcbiAqIENsYXNzIHRoYXQgcmVwcmVzZW50cyBhIFJlbGF5IGNvbnRyb2xsZXIgYW5kIHJvdXRlcyB0cmlnZXIgZGF0YS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVsYXlDb250cm9sbGVyIGltcGxlbWVudHMgSUNvbnRyb2xsZXIge1xuXG4gIHB1YmxpYyBwYXRoOiBzdHJpbmc7XG4gIHB1YmxpYyByb3V0ZXI6IGV4cHJlc3MuUm91dGVyO1xuICBwdWJsaWMgbG9nZ2VyOiBJTG9nZ2VyO1xuICBwdWJsaWMgc2VydmljZTogSVNlcnZpY2U7XG5cbiAgY29uc3RydWN0b3IobG9nZ2VyOiBJTG9nZ2VyLCBwYXRoOiBzdHJpbmcsIHNlcnZpY2U6IElTZXJ2aWNlKSB7XG4gICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgICB0aGlzLnJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XG4gICAgdGhpcy5sb2dnZXIgPSBsb2dnZXI7XG4gICAgdGhpcy5zZXJ2aWNlID0gc2VydmljZTtcblxuICAgIHRoaXMubG9hZFJvdXRlcygpO1xuICB9XG5cbiAgcHJpdmF0ZSBsb2FkUm91dGVzID0gKCkgPT4ge1xuICAgIHRoaXMucm91dGVyLmdldChcIi9cIiwgdGhpcy5nZXRBbGxSZWxheXMpO1xuICAgIHRoaXMucm91dGVyLnBvc3QoXCIvXCIsIHRoaXMuY3JlYXRlTmV3UmVsYXkpO1xuICAgIHRoaXMucm91dGVyLnB1dChcIi9cIiwgdGhpcy51cGRhdGVSZWxheSk7XG4gICAgdGhpcy5yb3V0ZXIuZGVsZXRlKFwiL1wiLCB0aGlzLmRlbGV0ZVJlbGF5KTtcblxuICAgIHRoaXMubG9nZ2VyLmluZm8oXCJSZWxheUNvbnRyb2xsZXIgfFwiLCBcInJvdXRlcyBsb2FkZWRcIik7XG4gIH1cblxuICBwcml2YXRlIGdldEFsbFJlbGF5cyA9IChyZXE6IGV4cHJlc3MuUmVxdWVzdCwgcmVzOiBleHByZXNzLlJlc3BvbnNlLCBuZXh0OiBleHByZXNzLk5leHRGdW5jdGlvbikgPT4ge1xuICAgIHRoaXMuc2VydmljZS5yZWFkKClcbiAgICAudGhlbigocmVzcG9uc2U6IElSZXNwb25zZSkgPT4gcmVzLnN0YXR1cygyMDApLnNlbmQocmVzcG9uc2UpKVxuICAgIC5jYXRjaCgocmVzcG9uc2U6IElSZXNwb25zZSkgPT4gcmVzLnN0YXR1cyg0MDApLnNlbmQocmVzcG9uc2UpKTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlTmV3UmVsYXkgPSAocmVxOiBleHByZXNzLlJlcXVlc3QsIHJlczogZXhwcmVzcy5SZXNwb25zZSwgbmV4dDogZXhwcmVzcy5OZXh0RnVuY3Rpb24pID0+IHtcbiAgICB0aGlzLnNlcnZpY2UuY3JlYXRlKHJlcS5ib2R5KVxuICAgIC50aGVuKChyZXNwb25zZTogSVJlc3BvbnNlKSA9PiByZXMuc3RhdHVzKDIwMCkuc2VuZChyZXNwb25zZSkpXG4gICAgLmNhdGNoKChyZXNwb25zZTogSVJlc3BvbnNlKSA9PiByZXMuc3RhdHVzKDQwMCkuc2VuZChyZXNwb25zZSkpO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVSZWxheSA9IChyZXE6IGV4cHJlc3MuUmVxdWVzdCwgcmVzOiBleHByZXNzLlJlc3BvbnNlLCBuZXh0OiBleHByZXNzLk5leHRGdW5jdGlvbikgPT4ge1xuICAgIHRoaXMuc2VydmljZS51cGRhdGUocmVxLnBhcmFtcy5pZCwgcmVxLmJvZHkpXG4gICAgLnRoZW4oKHJlc3BvbnNlOiBJUmVzcG9uc2UpID0+IHJlcy5zdGF0dXMoMjAwKS5zZW5kKHJlc3BvbnNlKSlcbiAgICAuY2F0Y2goKHJlc3BvbnNlOiBJUmVzcG9uc2UpID0+IHJlcy5zdGF0dXMoNDAwKS5zZW5kKHJlc3BvbnNlKSk7XG4gIH1cblxuICBwcml2YXRlIGRlbGV0ZVJlbGF5ID0gKHJlcTogZXhwcmVzcy5SZXF1ZXN0LCByZXM6IGV4cHJlc3MuUmVzcG9uc2UsIG5leHQ6IGV4cHJlc3MuTmV4dEZ1bmN0aW9uKSA9PiB7XG4gICAgdGhpcy5zZXJ2aWNlLmRlbGV0ZShyZXEucGFyYW1zLmlkKVxuICAgIC50aGVuKChyZXNwb25zZTogSVJlc3BvbnNlKSA9PiByZXMuc3RhdHVzKDIwMCkuc2VuZChyZXNwb25zZSkpXG4gICAgLmNhdGNoKChyZXNwb25zZTogSVJlc3BvbnNlKSA9PiByZXMuc3RhdHVzKDQwMCkuc2VuZChyZXNwb25zZSkpO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
